{"version":3,"file":"static/js/407.73576318.chunk.js","mappings":"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","sources":["components/container/MainContainer.tsx","hook/SensorAPIservices.tsx","pages/home/sensorsTable/SensorsListTable.jsx","pages/charts/sensorChart/SensorsChart.jsx","components/card/HomeCards.tsx","pages/home/Home.tsx","utils/axios.jsx"],"sourcesContent":["import React, { CSSProperties } from \"react\";\r\nimport \"./containerStyle.css\";\r\ntype chilPropsType = {\r\n  children?: React.ReactNode;\r\n  styleAsProps?: CSSProperties;\r\n  className?: string;\r\n};\r\nfunction MainContainer({ className, children, styleAsProps }: chilPropsType) {\r\n  return (\r\n    <section className={`section ${className}`} style={styleAsProps}>\r\n      <div className=\"row\">{children}</div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import { useQuery } from \"react-query\";\r\nimport axiosInstance from \"../utils/axios\";\r\nimport sensorsTypes4API from \"../types/Types\";\r\nimport { axiosResponseTypes } from \"../types/Types\";\r\n\r\n/**\r\n * ------------ API Requests ------------\r\n * http://localhost:5000/home/sensors_list\r\n * http://localhost:5000/home/total_sensors\r\n * http://localhost:5000/home/total_customers\r\n * http://localhost:5000/home/total_open_alerts\r\n * http://localhost:5000/home/sensor_temp_char\r\n */\r\n\r\nconst fetchTotalSensorsData = async () => {\r\n  try {\r\n    const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n      \"home/total_sensors\"\r\n    );\r\n    return response;\r\n  } catch (err) {\r\n    console.log(\"Error Occured\", (err as Error).message);\r\n  }\r\n};\r\nconst fetchSensorsData = async (pageNumber: number, limitPerPage: number) => {\r\n  try {\r\n    const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n      `home/sensors_list?page=${pageNumber}&limit=${limitPerPage}`\r\n    );\r\n    return response;\r\n  } catch (err) {\r\n    return (err as Error).message;\r\n  }\r\n};\r\n\r\nconst fetchTotalOpenAlertsData = async () => {\r\n  try {\r\n    const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n      \"home/total_open_alerts\"\r\n    );\r\n    return response;\r\n  } catch (err) {\r\n    console.log(\"Error Occured\", (err as Error).message);\r\n  }\r\n};\r\n\r\nconst getHomeChartData = async () => {\r\n  try {\r\n    const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n      \"home/sensor_temp_char\"\r\n    );\r\n    return response;\r\n  } catch (err) {\r\n    return (err as Error).message;\r\n  }\r\n};\r\n\r\nconst fetchTotalCustomersData = async () => {\r\n  try {\r\n    const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n      \"home/total_customers\"\r\n    );\r\n    return response;\r\n  } catch (err) {\r\n    console.log(\"Error Occured\", (err as Error).message);\r\n  }\r\n};\r\n\r\nexport const TotalSenserAPIServices = () => {\r\n  return useQuery(\"totalSensors\", fetchTotalSensorsData);\r\n};\r\n\r\nexport const SenserAPIServices = ({\r\n  currentPage,\r\n  itemsPerPage,\r\n  onSuccess,\r\n  onError\r\n}: sensorsTypes4API) => {\r\n  return useQuery(\r\n    [\"sensors_list\", currentPage],\r\n    () => fetchSensorsData(currentPage, itemsPerPage),\r\n    {\r\n      onSuccess,\r\n      onError\r\n    }\r\n  );\r\n};\r\n\r\nexport const OpenAlertAPIServices = () => {\r\n  return useQuery(\"totalAlerts\", fetchTotalOpenAlertsData);\r\n};\r\n\r\nexport const ChartAPIServices = () => {\r\n  return useQuery(\"chart_data\", getHomeChartData);\r\n};\r\n\r\nexport const TotalCustomersAPIServices = () => {\r\n  return useQuery(\"totalCustomers\", fetchTotalCustomersData);\r\n};\r\n\r\n// export const SenserAPIServices2 = (\r\n//   pageNumber: number,\r\n//   limitPerPage: number\r\n// ) => {\r\n//   return useQuery([\"sensors_list\", pageNumber], () =>\r\n//     fetchSensorsData(pageNumber, limitPerPage)\r\n//   );\r\n// };\r\n\r\n/**\r\n *\r\n * refetchOnWindowFocus: automatically requests fresh data in the background if user leaves the app and returns to stale data.\r\n * refetchOnmount: if true, refetch on mount if the data is stale.\r\n * refetchOnReconnect: if true, refetch on reconnect if the data is stale.\r\n * retry: if true, failed queries will retry infinitely.\r\n * staleTime: the time in milliseconds after data is considered stale. Defaults to 0.\r\n *\r\n */\r\n//   const queryClient = new QueryClient({\r\n//     defaultOptions: {\r\n//       queries: {\r\n//         refetchOnWindowFocus: false,\r\n//         refetchOnmount: false,\r\n//         refetchOnReconnect: false,\r\n//         retry: false,\r\n//         staleTime: 5*60*1000,\r\n//       },\r\n//     },\r\n//   });\r\n","// https://www.youtube.com/watch?v=6DtBw3PaeHs\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport SensorTypes from \"../../../types/Types\";\r\nimport { SenserAPIServices } from \"../../../hook/SensorAPIservices\";\r\n\r\nimport \"./sensorsListTable.css\";\r\n\r\nfunction SensorsListTable({ totalSensors }) {\r\n  const totalSensor = parseInt(totalSensors);\r\n\r\n  // --------- Pagination Setup Hooks ------------------------\r\n  const [currentPage, setcurrentPage] = useState(1);\r\n  const [itemsPerPage, setitemsPerPage] = useState(5);\r\n  const [pageNumberLimit, setpageNumberLimit] = useState(5);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n\r\n  const onSuccess = data => {\r\n    // console.log(\"Perform side effect after data fetching\", data);\r\n  };\r\n  const onError = error => {\r\n    return <h1>{error.message}</h1>;\r\n  };\r\n\r\n  // ----------------- Get Data From API using reactQuery -----------------\r\n  const params = { currentPage, itemsPerPage, onSuccess, onError };\r\n  const { isLoading, isError, data, error, isFetching } = SenserAPIServices(\r\n    params\r\n  );\r\n  const currentItems = data?.data.results;\r\n  const nextPage = data?.data.next;\r\n  const prevPage = data?.data.previous;\r\n\r\n  // -------------- Create Array of page number for pagination --------\r\n  const pages = [];\r\n  for (let i = 1; i <= Math.ceil(totalSensor / itemsPerPage); i++) {\r\n    pages.push(i); //  150 / 5 => 30 pages\r\n  }\r\n\r\n  const handleClick = event => {\r\n    setcurrentPage(Number(event.target.id));\r\n  };\r\n\r\n  /**\r\n   * We have 30 pages and 150 records\r\n   * First page: indexOfLastItem = 5\r\n   * Second Page: indexOfLastItem = 10\r\n   */\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n\r\n  /**\r\n   * First page: indexOfFirstItem = 0\r\n   * Second Page: indexOfFirstItem = 5\r\n   * Increment and decrement by 5\r\n   */\r\n  // const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  // const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);\r\n  // const currentItems = data2;\r\n\r\n  // console.log(\"Cur Items:\", currentItems);\r\n\r\n  const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () => {\r\n    setcurrentPage(currentPage - 1);\r\n    if ((currentPage - 1) % pageNumberLimit === 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  let pageIncrementBtn = null;\r\n  if (pages.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>;\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>;\r\n  }\r\n\r\n  // const handleLoadMore = () => {\r\n  //   setitemsPerPage(itemsPerPage + 5);\r\n  // };\r\n\r\n  const handlePrevPage = () => {\r\n    setcurrentPage(prevPage.page);\r\n  };\r\n  const handleNextPage = () => {\r\n    setcurrentPage(nextPage.page);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (isError) {\r\n    return (\r\n      <span>\r\n        {error instanceof Error ? <h2>{error.message}</h2> : \"Unexpected error\"}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  // ---------------- Add active class to active list item ----------------\r\n  const renderPageNumbers = pages.map(number => {\r\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n      return (\r\n        <li\r\n          key={number}\r\n          id={number}\r\n          onClick={handleClick}\r\n          className={currentPage === number ? \"active\" : null}\r\n        >\r\n          {number}\r\n        </li>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"col-lg-12 m-t-20\">\r\n      <div className=\"card\">\r\n        {/* Setting Left Icon */}\r\n        <div className=\"filter\">\r\n          <a className=\"icon\" href=\"#\">\r\n            <i className=\"bi bi-gear\" />\r\n          </a>\r\n        </div>\r\n        {/* End Setting Left Icon */}\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">SENSOR LIST</h5>\r\n\r\n          <div className=\"sensorListWrapper\">\r\n            <table className=\"table table-striped\">\r\n              <tbody>\r\n                {currentItems.map(\r\n                  ({\r\n                    device_id,\r\n                    last_online,\r\n                    last_temp,\r\n                    customer,\r\n                    location\r\n                  }) => {\r\n                    return renderData(\r\n                      device_id,\r\n                      last_online,\r\n                      last_temp,\r\n                      location\r\n                    );\r\n                  }\r\n                )}\r\n              </tbody>\r\n            </table>\r\n            <ul className=\"pageNumbers\">\r\n              <li>\r\n                <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n                  Prev\r\n                </button>\r\n              </li>\r\n              {pageDecrementBtn}\r\n              {renderPageNumbers}\r\n              {pageIncrementBtn}\r\n              <li>\r\n                <button\r\n                  onClick={handleNextPage}\r\n                  disabled={currentPage === totalSensor}\r\n                >\r\n                  Next\r\n                </button>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"col-12 loading\">{isFetching && \"Loading...\"}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function renderData(device_id, last_online, last_temp, location) {\r\n    return (\r\n      <tr key={device_id}>\r\n        <th>{device_id}</th>\r\n        <td>\r\n          {moment(parseInt(last_online)).format(\"ll\")}\r\n          <br />\r\n          <small>Last Online</small>\r\n        </td>\r\n        <td>\r\n          {last_temp}\r\n          <br />\r\n          <small>Temp</small>\r\n        </td>\r\n        <td>\r\n          {location}\r\n          <br />\r\n          <small>Location</small>\r\n        </td>\r\n        <td>\r\n          <button className=\"optionsButton\">Options</button>\r\n        </td>\r\n        <td>\r\n          <Link to={`/sensorDetails/${device_id}`}>\r\n            <button className=\"detailsButton\">Details</button>\r\n          </Link>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SensorsListTable;\r\n","import \"./sensorsChartStyle.css\";\r\nimport \"chartjs-adapter-moment\";\r\n\r\nimport { ChartAPIServices } from \"../../../hook/SensorAPIservices\";\r\n\r\nimport moment from \"moment\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  TimeScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from \"chart.js\";\r\nChartJS.register(\r\n  TimeScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  // title: {\r\n  //   display: true,\r\n  //   text: \"LineChart\"\r\n  // },\r\n  // response: true,\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n    position: \"bottom\"\r\n  },\r\n  scales: {\r\n    x: {\r\n      type: \"time\",\r\n      time: {\r\n        displayFormats: {\r\n          millisecond: \"MM/YY\",\r\n          second: \"MM/YY\",\r\n          minute: \"MM/YY\",\r\n          hour: \"MM/YY\",\r\n          day: \"MM/YY\",\r\n          week: \"MM/YY\",\r\n          month: \"MM/YY\",\r\n          quarter: \"MM/YY\",\r\n          year: \"MM/YY\"\r\n        },\r\n        tooltipFormat: \"DD/MM/YY\"\r\n      }\r\n    },\r\n    y: {\r\n      ticks: {\r\n        min: 20.0,\r\n        max: 65.0,\r\n        stepSize: 5.0,\r\n        callback: function(value, index, values) {\r\n          return value + \".0 °C\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction convertDate(time) {\r\n  // var fullDate = new Date(time).toLocaleDateString(\"en-US\");\r\n  // // console.log(moment(fullDate).format(\"D/MM/Y\")); // 27/09/2021\r\n  // console.log(moment(fullDate).format(\"MM/D\")); //09/27\r\n\r\n  var fullDate = new Date(time).toLocaleDateString(\"en-US\");\r\n  return moment(fullDate).format(\"MM/DD\"); //09/27\r\n  // return fullDate;\r\n}\r\n\r\n// var s = new Date(1632740291000).toLocaleDateString(\"en-US\");\r\n// // console.log(moment(s).format(\"D/MM/Y\")); // 27/09/2021\r\n// console.log(moment(s).format(\"MM/D\")); //09/27\r\n\r\nconst SensorsChart = () => {\r\n  const { isLoading, isError, data, error } = ChartAPIServices();\r\n  // ---------- Handling Loading and Errors -----------------\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (isError) {\r\n    return (\r\n      <span>\r\n        {error instanceof Error ? <h2>{error.message}</h2> : \"Unexpected error\"}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const APIData = data?.data.records;\r\n  /**\r\n   * 1. Get APIData\r\n   * 2. select stats of each device using map function\r\n   * 3. rename time as a x and temp as a y of each stats\r\n   * 4. get device id for showing as a label\r\n   */\r\n  const allStats = APIData.map(item => item.stats);\r\n  // rename fileds for first device\r\n  const value1 = allStats[0].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const value2 = allStats[1].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const value3 = allStats[2].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const allDevicesName = APIData.map(item => item.device_id);\r\n\r\n  const chartData = {\r\n    datasets: [\r\n      {\r\n        label: allDevicesName[0],\r\n        data: value1,\r\n        borderColor: [\"rgb(186 181 181)\"],\r\n        backgroundColor: [\"rgba(255, 99, 132, 0.5)\"],\r\n        pointBackgroundColor: \"rgb(255, 99, 132)\",\r\n        pointBorderColor: \"rgba(255, 99, 132, 0.5)\",\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        label: allDevicesName[1],\r\n        data: value2,\r\n        borderColor: [\"rgb(7 156 204)\"],\r\n        backgroundColor: [\"rgb(7 156 204)\"],\r\n        pointBackgroundColor: \"rgb(7 156 204)\",\r\n        pointBorderColor: \"rgb(7 156 204)\",\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        label: allDevicesName[2],\r\n        data: value3,\r\n        borderColor: [\"rgb(244 108 119)\"],\r\n        backgroundColor: [\"rgb(233 30 46)\"],\r\n        pointBackgroundColor: \"rgb(233 30 46)\",\r\n        pointBorderColor: \"rgb(233 30 46)\",\r\n        borderWidth: 1\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12 col-sm-12 col-xs-12\">\r\n      <div className=\"row\">\r\n        <div className=\"sensorChartWrapper\">\r\n          <h4 className=\"chartTitle\">SENSORS TEMPRATURES</h4>\r\n          <Line options={options} data={chartData} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SensorsChart;\r\n","type chilPropsType = {\r\n  title?: string;\r\n  iconName?: string;\r\n  data?: number;\r\n};\r\nconst HomeCards = ({ title, iconName, data }: chilPropsType) => {\r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"d-flex align-items-center justify-content-between\">\r\n            <div className=\"ps-3\">\r\n              <h6>{title}</h6>\r\n              <span className=\"text-muted small pt-2 ps-1\">{data}</span>\r\n            </div>\r\n            <div className=\"card-icon rounded-circle d-flex align-items-center justify-content-center\">\r\n              <i className={`bi ${iconName}`} style={{ fontSize: \"25px\" }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HomeCards;\r\n","\r\nimport React, {  Fragment } from \"react\";\r\n\r\nimport {  OpenAlertAPIServices ,TotalCustomersAPIServices, TotalSenserAPIServices } from \"../../hook/SensorAPIservices\"\r\n\r\nimport SensorsListTable from \"./sensorsTable/SensorsListTable\";\r\nimport SensorsChart from \"../charts/sensorChart/SensorsChart\";\r\nimport HomeCards from \"../../components/card/HomeCards\";\r\nimport MainContainer from \"../../components/container/MainContainer\";\r\n\r\n\r\nconst HomePage : React.FC = () => {\r\n\r\n// ----------------- Get Data From API using reactQuery -----------------\r\nconst { isLoading: isLoadingTotalSensors, isError: isErrorTotalSensors, data: totalSensorsData, error: errorTotalSensors } = TotalSenserAPIServices();\r\nconst { isLoading: isLoadingAlerts , isError: isErrorAlerts, data: totalAlerts, error: errorAlert } = OpenAlertAPIServices();\r\nconst { isLoading: isLoadingCustomer , isError: isErrorCustomer, data: totalCustomer, error: errorCustomer } = TotalCustomersAPIServices();\r\n\r\n\r\n// ------------------- Check Loading and Errors --------------------------\r\nconst isLoading = isLoadingTotalSensors || isLoadingAlerts || isLoadingCustomer \r\nconst isError = isErrorTotalSensors ||  isErrorAlerts  || isErrorCustomer  \r\n// const error = [errorSensors, errorAlert, errorCustomer]\r\n\r\n\r\nconst totalSensors: number = totalSensorsData?.data.records;\r\n\r\n  \r\n  // ---------- Handling Loading and Errors -----------------\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>\r\n  }\r\n\r\nif (isError) {\r\n   return (\r\n      <span>\r\n         { errorTotalSensors instanceof Error ? <h2>{errorTotalSensors.message}</h2>: \"Unexpected error\" } \r\n         { errorAlert instanceof Error ? <h2>{errorAlert.message}</h2> :  \"Unexpected error\" } \r\n         { errorCustomer instanceof Error ? <h2>{errorCustomer.message}</h2>: \"Unexpected error\" } \r\n      </span>\r\n   )\r\n }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* ------------- Main Content of Home Page -------------- */}\r\n        <main id=\"main\" className=\"main\">\r\n          <MainContainer  className=\"dashboard\" />\r\n            {/* ---------- Total Report ----- */}\r\n            <div className=\"col-lg-12\">\r\n              <div className=\"row\">\r\n               <HomeCards title=\"TOTAL SENSORS\" iconName=\"bi-kanban\" data={totalSensors} />  \r\n               <HomeCards title=\"OPEN ALERTS\" iconName=\"bi-tags-fill\" data={totalAlerts?.data.records} />            \r\n               <HomeCards title=\"TOTAL CUSTOMERS\" iconName=\"bi-pc-display-horizontal\" data={totalCustomer?.data.records} />  \r\n              </div>\r\n            </div>\r\n            {/* -------- End Total Report----- */}\r\n\r\n\r\n            {/* ---Sensor Temprature Graph --- */}\r\n                <SensorsChart />\r\n            {/* --- End of Sensor Temprature Graph --- */}\r\n\r\n\r\n            {/* --- Sensor List With Pagination --- */}\r\n               <SensorsListTable totalSensors={totalSensors}  />\r\n            {/* --- End of Sensor List --- */}\r\n\r\n          \r\n      {/* ----------- End of Main Content of Home Page ---------- */}\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import axios from \"axios\";\r\nconst baseURL = process.env.REACT_APP_BACKEDN_URL;\r\n// console.log(\"Base URL =\", baseURL);\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"names":["className","children","styleAsProps","style","fetchTotalSensorsData","axiosInstance","response","console","log","message","fetchSensorsData","pageNumber","limitPerPage","fetchTotalOpenAlertsData","getHomeChartData","fetchTotalCustomersData","totalSensors","totalSensor","parseInt","useState","currentPage","setcurrentPage","itemsPerPage","pageNumberLimit","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","params","onSuccess","data","onError","error","useQuery","SenserAPIServices","isLoading","isError","isFetching","currentItems","results","nextPage","next","prevPage","previous","pages","i","Math","ceil","push","handleClick","event","Number","target","id","pageIncrementBtn","length","onClick","pageDecrementBtn","Error","renderPageNumbers","map","number","href","device_id","last_online","last_temp","customer","location","moment","format","to","renderData","page","disabled","ChartJS","TimeScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","maintainAspectRatio","legend","display","position","scales","x","type","time","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","tooltipFormat","y","ticks","min","max","stepSize","callback","value","index","values","APIData","records","allStats","item","stats","value1","temp","value2","value3","allDevicesName","chartData","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","borderWidth","title","iconName","fontSize","isLoadingTotalSensors","isErrorTotalSensors","totalSensorsData","errorTotalSensors","isLoadingAlerts","isErrorAlerts","totalAlerts","errorAlert","isLoadingCustomer","isErrorCustomer","totalCustomer","errorCustomer","Fragment","MainContainer","axios","baseURL","process","headers"],"sourceRoot":""}